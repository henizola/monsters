{"version":3,"sources":["components/search/Search.component.jsx","components/card-component/Card.component.jsx","components/card-list/Card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","type","placeholder","onChange","onSearch","Card","alt","src","Monster","id","name","email","CardList","filterdMonsters","map","key","App","event","setState","SearchField","target","value","state","Monsters","fetch","then","response","json","this","filter","monster","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+TAEaA,G,YAAQ,SAACC,GAAD,OACjB,2BAAOC,UAAU,SAAQC,KAAK,SAASC,YAAaH,EAAMG,YAAaC,SAAUJ,EAAMK,aCD9EC,G,MAAO,SAAAN,GAChB,OACI,yBAAKC,UAAU,kBACd,yBAAKM,IAAI,WAAWC,IAAG,+BAA0BR,EAAMS,QAAQC,GAAxC,6BACzB,4BAAKV,EAAMS,QAAQE,MACnB,2BAAIX,EAAMS,QAAQG,UCJZC,G,MAAU,SAAAb,GACnB,OAAO,yBAAKC,UAAU,QACjBD,EAAMc,gBAAgBC,KAAI,SAAAN,GAAO,OAAE,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,UCkC7DQ,E,kDAhCb,aAAc,IAAD,8BACX,gBAYJZ,SAAU,SAACa,GAAY,OAAQ,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAVnE,EAAKC,MAAM,CACTC,SAAS,GACTJ,YAAY,IALH,E,gEAQK,IAAD,OACjBK,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAAQF,MAAK,SAAAF,GACvF,EAAKL,SAAS,CAACK,SAASA,S,+BAOzB,IAAD,EACiCK,KAAKN,MAA7BC,EADT,EACSA,SAAWJ,EADpB,EACoBA,YACdN,EAAgBU,EAASM,QAAO,SAAAC,GAAO,OAAEA,EAAQpB,KAAKqB,cAAcC,SAASb,EAAYY,kBAC7F,OACA,6BACE,+CACA,kBAAC,EAAD,CAAQ3B,SAAUwB,KAAKxB,SAAWF,YAAY,aAC9C,kBAAC,EAAD,CAAUW,gBAAiBA,S,GA1BfoB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c7b62dc6.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Search.styles.css'\r\nexport const Search =(props)=>(\r\n    <input className=\"Search\"type='search' placeholder={props.placeholder} onChange={props.onSearch}></input>\r\n);","import React from 'react';\r\nimport './card.style.css';\r\nexport const Card = props =>{\r\n    return(\r\n        <div className=\"card-container\">\r\n         <img alt='monsters' src={`https://robohash.org/${props.Monster.id}/?set=set2&size=180x180`}/>\r\n       <h2>{props.Monster.name}</h2>\r\n       <p>{props.Monster.email}</p>    \r\n        </div>\r\n        \r\n    );\r\n}","import React from 'react';\r\nimport {Card} from '../card-component/Card.component'\r\nimport './card-list.style.css'\r\nexport const CardList= props=>{\r\n    return <div className=\"Card\">\r\n        {props.filterdMonsters.map(Monster=><Card key={Monster.id} Monster={Monster}></Card>)}\r\n        </div>\r\n}","import React from 'react';\nimport './App.css';\nimport {Search} from  './components/search/Search.component';\nimport {CardList} from './components/card-list/Card-list.component'\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n     \n    this.state={\n      Monsters:[],\n      SearchField:''\n    }\n  }\ncomponentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(Monsters=>{\n    this.setState({Monsters:Monsters})\n  })\n}\nonSearch =(event) => { return  this.setState({SearchField:event.target.value})}\n  \n\n  render()\n  {\n    const {Monsters , SearchField}=this.state;\n  const filterdMonsters=Monsters.filter(monster=>monster.name.toLowerCase().includes(SearchField.toLowerCase()));\n    return (\n    <div>\n      <h1>Monster Rolodex</h1>\n      <Search onSearch={this.onSearch}  placeholder='monsters'/>\n      <CardList filterdMonsters={filterdMonsters}></CardList>\n      \n    </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}